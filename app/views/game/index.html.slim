canvas#starfield
button#start-button
  i.fa-brands.fa-space-awesome
  | &nbsp
  |Start Game

div#player-prompt style="display:none;"
  / ###################################################
  / ## FORM ##
  / ##########
  = form_with url: '/save_player', method: :post, id: 'player-form', local: false, html: { class: 'form-container' } do |form|
    div.form-container
      .title
        h1
          | Cosmic Defender
      .container.col.reduce.round
        = form.label :name, 'Enter your name:', class: 'form-label'
        = form.text_field :name, id: 'player-name', class: 'form-input'
      / ########### SUBMIT BUTTON ###################
      = button_tag type: 'submit', id: 'continue-button', class: 'btn' do
        i.fa-solid.fa-user-astronaut
        | &nbsp
        | Continue

div#high-scores-prompt
  = render partial: "player_scores", locals: { players: @players }
div#player-name-display

audio#audio-player loop="loop" style="display:none;"
  source src=asset_path("intro.mp3") type="audio/mp3"

/#########################################################
/## MODAL SECTION ##
/###################
div#nameModal.modal
  div.modal-content
    span.close-button &times;
    p Please enter your name to continue.

#rotateMessage
    div style="position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%);"
        .jet-icon-wrapper
            i.fa-brands.fa-space-awesome
            .jet-blast
        p style="margin-top: 30px"Please rotate your device to landscape mode to play the game.
        i.fa-solid.fa-sync-alt

javascript:
    $(document).ready(function () {
        function adjustLayout() {
            if ($(window).width() <= 768) {
                // Adjust layout for small screens
                $('#title').css('font-size', '24px');
                $('.form-container').css('width', '100%');
            } else {
                // Reset to default styles for larger screens
                $('#title').css('font-size', '');
                $('.form-container').css('width', '');
            }
        }

        // Play the audio when the user moves the mouse over the body
        document.body.addEventListener('mousemove', function playAudioOnce() {
            const audio = document.getElementById('audio-player');
            audio.play().then(() => {
                // Remove the event listener after playing
                document.body.removeEventListener('mousemove', playAudioOnce);
            }).catch((error) => {
                console.error("Audio play failed:", error);
            });
        });

        let animateStars = true;  // Add this flag to control the animation
        const canvas     = $('#starfield')[0];
        const ctx        = canvas.getContext('2d');
        let stars        = [];

        function resizeCanvas() {
            const aspectRatio = 16 / 9; // You can change this to fit your game's aspect ratio
            let newWidth = $(window).width();
            let newHeight = $(window).height();

            // Make sure the canvas maintains its aspect ratio
            if (newWidth / newHeight > aspectRatio) {
                newWidth = newHeight * aspectRatio;
            } else {
                newHeight = newWidth / aspectRatio;
            }
            canvas.width = newWidth;
            canvas.height = newHeight;
        }

        function createStars() {
            for (let i = 0; i < 100; i++) {
                stars.push({
                    x: Math.random() * canvas.width,
                    y: Math.random() * canvas.height,
                    size: Math.random() * 3 + 1,
                    speed: Math.random() * 3 + 1
                });
            }
        }

        function drawStars() {
            if (!animateStars) return;  // Stop drawing if the flag is false
            ctx.clearRect(0, 0, canvas.width, canvas.height);
            ctx.fillStyle = '#ffffff';
            stars.forEach(star => {
                ctx.beginPath();
                ctx.arc(star.x, star.y, star.size, 0, Math.PI * 2);
                ctx.fill();
                star.y += star.speed;
                if (star.y > canvas.height) {
                    star.y = 0;
                }
            });
        }

        function animate() {
            drawStars();
            if (animateStars) {  // Only continue the animation if the flag is true
                requestAnimationFrame(animate);
            }
        }

        // Show the form when the "Start Game" button is clicked
        $('#start-button').click(function () {
            $('#player-prompt').show();
            $('#start-button').hide();
            $('#high-scores-prompt').hide();
            // Add the center-screen class to center the title
            $('#title').addClass('center-screen');
        });

        // Get the modal and the close button
        const modal = document.getElementById('nameModal');
        const closeButton = document.getElementsByClassName('close-button')[0];

        // When the user clicks on the close button, close the modal
        closeButton.onclick = function () {
            modal.style.display = 'none';
        };
        // Handle AJAX success for the player form
        $('#player-form').on('ajax:success', function (event) {
            console.log("SUCCESS!!");
            const [data, _status, _xhr] = event.detail;
            const playerName = data.name;
            const playerId = data.id;

            // Check if the player name is entered
            if (playerName && playerName.trim() !== '') {
                animateStars = false;

                // Hide the form
                $(this).hide();
                $('#title').hide();

                // Initialize the Phaser game
                initializeGame(playerName, playerId);
            } else {
                // Show the modal
                modal.style.display = 'block';
            }
        });

        resizeCanvas();
        createStars();
        animate();
        // Call adjustLayout on page load and window resize
        adjustLayout();
        $(window).resize(adjustLayout);

        // Create a function to handle orientation changes
        function handleOrientation() {
            if (window.innerWidth > 768) {
                $('#rotateMessage').hide(); // Hide the modal on computer screens
                return; // Exit the function early
            }
            if (window.orientation === 90 || window.orientation === -90) {
                // Landscape
                $('#rotateMessage').hide(); // Hide the modal
            } else {
                // Portrait
                $('#rotateMessage').show(); // Show the modal
            }
        }

        // Initialize orientation handling
        handleOrientation();

        // Listen for orientation changes
        window.addEventListener("orientationchange", handleOrientation, false);
    });
